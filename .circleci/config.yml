version: 2.1

website_docker_defaults: &website_docker_defaults
  docker:
    - image: circleci/node:8.11.3

commands:
  prep_website_env:
    description: Prepapres environment with cache
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          name: Restore node_modules cache
          key: website-{{ .Branch }}-{{ checksum "yarn.lock" }}
  save_website_cache:
    description: Saves environment cache
    steps:
      - save_cache:
          name: Save node_modules cache
          key: website-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules/
jobs:
  build:
    docker:
      - image: circleci/node:8.10.0
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run: make -C client install
      - run: make -C service install
      - run: make -C client package
      - run: make -C client release-version
      - run: make -C service package
      - run: make -C client build-docker
      - run:
          name: "Cache Docker Image"
          command: |
            mkdir -p docker-cache
            docker save -o docker-cache/sanity-docker.tar tophatmonocle/sanity-runner:latest
      - persist_to_workspace:
          root: ./
          paths:
            - client/bin/
            - client/version.txt
            - client/Dockerfile
            - service/artifacts/build/
            - docker-cache/
  docker-deploy:
    docker:
      - image: docker:stable
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/workspace
      - run:
          name: "Publish Release on Github"
          command: |
            VERSION=`cat ~/workspace/client/version.txt`
      - run:
          name: "Publish Release on Docker"
          command: |
            docker load < ~/workspace/docker-cache/sanity-docker.tar
            docker tag tophatmonocle/sanity-runner:latest tophatmonocle/sanity-runner:${VERSION}
            cat ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
  deploy:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/workspace
      - run:
          name: "Publish Release on Github"
          command: |
            mkdir release-archive
            VERSION=`cat ~/workspace/client/version.txt`
            tar cvf sanity-runner-serverless-${VERSION}.tar ~/workspace/service/artifacts/build/
            mv sanity-runner-serverless-${VERSION}.tar release-archive/
            mv ~/workspace/client/bin/* release-archive/
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete v${VERSION} release-archive/
      - run:
          name: "Publish Release on Docker"
          command: |
            docker load < ~/workspace/docker-cache/sanity-docker.tar
            docker tag tophatmonocle/sanity-runner:latest tophatmonocle/sanity-runner:${VERSION}
            cat ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
  website:
    <<: *website_docker_defaults
    working_directory: ~/repo/website
    steps:
      - prep_website_env
      - run: yarn install
      - save_website_cache
      - run: yarn build
      - persist_to_workspace:
          root: ./
          paths:
            - build/
  deploy_website:
    <<: *website_docker_defaults
    working_directory: ~/repo/website
    steps:
      - prep_website_env
      - attach_workspace:
          at: ./
      - add_ssh_keys:
          fingerprints:
            - "30:d8:05:7f:03:23:c8:0e:85:d2:18:85:d6:8c:57:13"
      - run:
          name: Setup git user and deploy website
          command: |
            git config --global user.email "circleci-sanity-runner@users.noreply.github.com"
            git config --global user.name "CircleCI Sanity Runner"
            USE_SSH=true yarn publish-gh-pages

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - docker-deploy:
          requires:
            - build      
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
      - website
      - deploy_website:
          requires:
            - website
          filters:
            branches:
              only:
                - master

experimental:
  notify:
    branches:
      only:
        - master

